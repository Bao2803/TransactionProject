package models

import (
	"github.com/jinzhu/gorm"
	"time"
)

type User struct {
	ID        uint `gorm:"primaryKey"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time `sql:"index" gorm:"index"`
	Email     string     `json:"email,omitempty" gorm:"not null;unique_index"`
	Password  string     `json:"password" gorm:"not null"`
	Last      string     `json:"last" gorm:"not null"`
	Middle    string     `json:"middle,omitempty"`
	First     string     `json:"first,omitempty"`
	Phone     string     `json:"phone,omitempty"`
}

type UserService struct {
	db *gorm.DB
}

func NewUserService(db *gorm.DB) (*UserService, error) {
	return &UserService{
		db: db,
	}, nil
}

// AutoMigrate will attempt to automatically migrate the users table
func (userService *UserService) AutoMigrate() error {
	if err := userService.db.AutoMigrate(&User{}).Error; err != nil {
		return err
	}
	return nil
}

// DestructiveReset drops the user table and rebuilds it.
func (userService *UserService) DestructiveReset() error {
	err := userService.db.DropTableIfExists(&User{}).Error
	if err != nil {
		return err
	}
	return userService.AutoMigrate()
}

// ReadByID will look up a transaction with the provided ID.
// If the transaction is found, we will return a nil error.
// If the transaction is not found, we will return ErrNotFound.
// If there is another error, we will return an error with more information
// about what went wrong. This may not be an error generated by the models
// package.
//
// As a general rule, any error but ErrNotFound should probably result in a 500
// error.
func (userService *UserService) ReadByID(id uint) (*User, error) {
	var user User
	db := userService.db.Where("id = ?", id)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

func (userService *UserService) ReadAll() ([]User, error) {
	var users []User
	userService.db.Find(&users)
	if userService.db.Error != nil {
		return nil, userService.db.Error
	}
	return users, nil
}

// Create will create the provided user and back-fill data like
// the ID, CreatedAt, and UpdatedAt fields.
func (userService *UserService) Create(user *User) error {
	return userService.db.Create(user).Error
}

// Update will update the provided user with all the data in the provided
// user object.
func (userService *UserService) Update(user *User) error {
	return userService.db.Save(user).Error
}

// Delete will delete the user with the provided ID
func (userService *UserService) Delete(id uint) error {
	if id == 0 { // Go default uint is 0, Gorm will delete all rows if id is not provided
		return ErrInvalidID
	}
	user := User{ID: id}
	return userService.db.Delete(user).Error
}
