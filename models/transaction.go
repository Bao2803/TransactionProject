package models

import (
	"errors"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"time"
)

var (
	// ErrNotFound is returned when a resource cannot be found in the database.
	ErrNotFound = errors.New("models: resource not found")

	// ErrInvalidID is returned when an invalid ID is provided to a method like
	// Delete.
	ErrInvalidID = errors.New("models: ID provided was invalid")
)

type Transaction struct {
	ID        uint `gorm:"primaryKey"`
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt *time.Time `sql:"index" gorm:"index"`
	Value     float64    `json:"value,omitempty" gorm:"not null"`
	Note      string     `json:"note,omitempty"`
	Sender    string     `json:"sender,omitempty" gorm:"not null"`
	Receiver  string     `json:"receiver,omitempty" gorm:"not null"`
}

type TransactionService struct {
	db *gorm.DB
}

// NewTransactionService Create a new TransactionService with a specified connectionInfo.
func NewTransactionService(db *gorm.DB) (*TransactionService, error) {
	return &TransactionService{
		db: db,
	}, nil
}

// AutoMigrate will attempt to automatically migrate the transactions table
func (transService *TransactionService) AutoMigrate() error {
	if err := transService.db.AutoMigrate(&Transaction{}).Error; err != nil {
		return err
	}
	return nil
}

// DestructiveReset drops the user table and rebuilds it.
func (transService *TransactionService) DestructiveReset() error {
	err := transService.db.DropTableIfExists(&Transaction{}).Error
	if err != nil {
		return err
	}
	return transService.AutoMigrate()
}

// first will query using the provided gorm.DB, and it will get the first item
// returned and place it into dst. If nothing is found in the query, it will
// return ErrNotFound
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if errors.Is(err, gorm.ErrRecordNotFound) {
		return ErrNotFound
	}
	return err
}

// ReadByID will look up a transaction with the provided ID.
// If the transaction is found, we will return a nil error.
// If the transaction is not found, we will return ErrNotFound.
// If there is another error, we will return an error with more information
// about what went wrong. This may not be an error generated by the models
// package.
//
// As a general rule, any error but ErrNotFound should probably result in a 500
// error.
func (transService *TransactionService) ReadByID(id uint) (*Transaction, error) {
	var transaction Transaction
	db := transService.db.Where("id = ?", id)
	err := first(db, &transaction)
	if err != nil {
		return nil, err
	}
	return &transaction, nil
}

func (transService *TransactionService) ReadAll() ([]Transaction, error) {
	var transactions []Transaction
	transService.db.Find(&transactions)
	if transService.db.Error != nil {
		return nil, transService.db.Error
	}
	return transactions, nil
}

// Create will create the provided transaction and back-fill data like
// the ID, CreatedAt, and UpdatedAt fields.
func (transService *TransactionService) Create(transaction *Transaction) error {
	return transService.db.Create(transaction).Error
}

// Update will update the provided trasaction with all the data in the provided
// user object.
func (transService *TransactionService) Update(transaction *Transaction) error {
	return transService.db.Save(transaction).Error
}

// Delete will delete the transaction with the provided ID
func (transService *TransactionService) Delete(id uint) error {
	if id == 0 { // Go default uint is 0, Gorm will delete all rows if id is not provided
		return ErrInvalidID
	}
	trasaction := Transaction{ID: id}
	return transService.db.Delete(trasaction).Error
}
